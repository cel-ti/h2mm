name: Build Executable

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies and generate requirements
      run: |
        python -m pip install --upgrade pip
        # Install toml parser
        pip install toml
        # Generate requirements.txt from pyproject.toml dependencies
        python -c "
        import toml
        with open('pyproject.toml', 'r') as f:
            data = toml.load(f)
        with open('requirements.txt', 'w') as f:
            f.write('\n'.join(data['project']['dependencies']))
        "

    - name: Commit requirements.txt
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add requirements.txt
        git commit -m "Auto-generate requirements.txt"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git push

    - name: Build with pyinstaller
      uses: sayyid5416/pyinstaller@v1
      with:
        python-file: "src/h2mm/__main__.py"
        requirements: "requirements.txt"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: h2mm-windows
        path: dist/h2mm.exe

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/h2mm.exe
        asset_name: h2mm.exe
        asset_content_type: application/octet-stream

    - name: Copy to root
      run: |
        if [ -f "./dist/h2mm.exe" ]; then
          cp ./dist/h2mm.exe ./release/h2mm.exe
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add release/h2mm.exe
          git commit -m "Update h2mm.exe to repo"
          git push
        fi

permissions:
  contents: write